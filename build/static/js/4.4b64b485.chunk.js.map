{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/ContactList/ContactItem/ContactItem.module.css","components/Filter/Filter.module.css","views/ContactsView/ContactsView.module.css","components/ContactForm/ContactForm.jsx","components/ContactList/ContactItem/ContactItem.jsx","components/ContactList/ContactList.jsx","components/ContactList/ContactList.container.jsx","components/Filter/Filter.jsx","views/ContactsView/ContactsView.jsx"],"names":["module","exports","ContactForm","dispatch","useDispatch","items","useSelector","contactsSelectors","getItems","useState","name","setName","number","setNumber","notifyWarn","text","toast","warn","MyButton","styled","MaterialButton","width","backgroundColor","color","boxShadow","className","styles","form","onSubmit","e","preventDefault","newContact","toLowerCase","find","contact","isValidContact","contactsOperations","addContact","success","TextField","input","size","label","variant","type","value","onChange","target","autoComplete","fontSize","padding","MyListItem","ListItem","borderBottom","display","ContactItem","onDelete","item","ListItemText","info","ListItemSecondaryAction","delete","onClick","ContactList","contacts","deleteContact","List","map","id","connect","state","filteredItems","contactId","Filter","filter","getFilter","useEffect","contactsActions","resetFilter","changeFilter","ContactsView","fetchContacts","title","contactsSection","length","position","autoClose","newestOnTop","limit","transition","Zoom"],"mappings":"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","file":"static/js/4.4b64b485.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__voR2j\",\"input\":\"ContactForm_input__2Jk9X\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"info\":\"ContactItem_info__Ir8yc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formTitle\":\"Filter_formTitle__2ZAUr\",\"input\":\"Filter_input__3IlHu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"ContactsView_title__metFc\",\"contactsSection\":\"ContactsView_contactsSection__2ElWR\"};","/*import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './ContactForm.module.css';\nimport { toast } from 'react-toastify';\n\nimport MaterialButton from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport { styled } from '@material-ui/core/styles';\n\nclass ContactForm extends Component {\n  state = {\n    name: '',\n    number: '',\n  };\n\n  notifyWarn = text => toast.warn(text);\n  notifySuccess = text => toast.success(text);\n\n  handleChange = e => {\n    const { name, value } = e.currentTarget;\n    name === 'number'\n      ? this.setState({ [name]: value.replace(/[^\\d-]/g, '') })\n      : this.setState({ [name]: value });\n  };\n\n  isValidContact = newContact => {\n    const name = newContact.name.toLowerCase();\n    const { number } = newContact;\n    const { items } = this.props;\n\n    if (name === '' || number === '') {\n      this.notifyWarn(`Please enter name and number`);\n      return true;\n    }\n\n    if (items.find(contact => contact.name.toLowerCase() === name)) {\n      this.notifyWarn(`${newContact.name} is already in contacts.`);\n      return true;\n    }\n  };\n\n  reset = () => {\n    this.setState({\n      name: '',\n      number: '',\n    });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n\n    const newContact = { ...this.state };\n    if (!this.isValidContact(newContact)) {\n      const { addContact } = this.props;\n\n      addContact(newContact);\n      this.notifySuccess('Added successfully');\n      this.reset();\n    }\n  };\n\n  render() {\n    const { name, number } = this.state;\n\n    const MyButton = styled(MaterialButton)({\n      width: 'fit-content',\n      backgroundColor: 'olive',\n      color: 'rgba(0, 0, 0, 0.87)',\n      boxShadow: '2px 2px 3px 0px rgba(0, 0, 0, 0.25)',\n    });\n\n    return (\n      <form className={styles.form} onSubmit={this.handleSubmit}>\n        <TextField\n          className={styles.input}\n          size=\"small\"\n          label=\"Name\"\n          variant=\"outlined\"\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={this.handleChange}\n          id={this.nameInputId}\n          autoComplete=\"off\"\n        />\n\n        <TextField\n          size=\"small\"\n          label=\"Number\"\n          variant=\"outlined\"\n          className={styles.input}\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          onChange={this.handleChange}\n          id={this.numberInputId}\n          autoComplete=\"off\"\n        />\n\n        <MyButton type=\"submit\">Add contact</MyButton>\n      </form>\n    );\n  }\n}\n\nContactForm.propTypes = {\n  addContact: PropTypes.func.isRequired,\n  items: PropTypes.array.isRequired,\n};\n\nexport default ContactForm;*/\n\n\nimport React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { contactsOperations, contactsSelectors } from '../../redux/contacts';\nimport styles from './ContactForm.module.css';\nimport { toast } from 'react-toastify';\nimport MaterialButton from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport { styled } from '@material-ui/core/styles';\n\nexport default function ContactForm() {\n  const dispatch = useDispatch();\n  const items = useSelector(contactsSelectors.getItems);\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const notifyWarn = text => toast.warn(text);\n  const notifySuccess = text => toast.success(text);\n\n  /*const handleChange = e => {\n    const { name, value } = e.currentTarget;\n    name === 'number'\n      ? setName({ [name]: value.replace(/[^\\d-]/g, '') })\n      : setName({ [name]: value });\n  };*/\n  const handleChangeName = e => {\n    setName(e.target.value);\n  };\n\n  const handleChangeNumber = e => {\n    setNumber(e.target.value);\n  };\n\n  const isValidContact = newContact => {\n    const name = newContact.name.toLowerCase();\n    const { number } = newContact;\n\n    if (name === '' || number === '') {\n      notifyWarn(`Please enter name and number`);\n      return true;\n    }\n\n    if (items.find(contact => contact.name.toLowerCase() === name)) {\n      notifyWarn(`${newContact.name} is already in contacts.`);\n      return true;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const newContact = {name, number};\n    if (!isValidContact(newContact)) {\n      dispatch(contactsOperations.addContact({ name, number }));\n      notifySuccess('Added successfully');\n      setName('');\n      setNumber('');\n    }\n  };\n\n  const MyButton = styled(MaterialButton)({\n      width: 'fit-content',\n      backgroundColor: 'olive',\n      color: 'rgba(0, 0, 0, 0.87)',\n      boxShadow: '2px 2px 3px 0px rgba(0, 0, 0, 0.25)',\n  });\n  \n  return (\n      <form className={styles.form} onSubmit={handleSubmit}>\n        <TextField\n          className={styles.input}\n          size=\"small\"\n          label=\"Name\"\n          variant=\"outlined\"\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={handleChangeName}\n          autoComplete=\"off\"\n        />\n\n        <TextField\n          size=\"small\"\n          label=\"Number\"\n          variant=\"outlined\"\n          className={styles.input}\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          onChange={handleChangeNumber}\n          autoComplete=\"off\"\n        />\n\n        <MyButton type=\"submit\">Add contact</MyButton>\n      </form>\n    );\n  }","import React from 'react';\nimport styles from './ContactItem.module.css';\nimport PropTypes from 'prop-types';\n\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport MaterialButton from '@material-ui/core/Button';\nimport { styled } from '@material-ui/core/styles';\n\nconst MyButton = styled(MaterialButton)({\n  backgroundColor: 'olive',\n  fontSize: '10px',\n  color: 'rgba(0, 0, 0, 0.87)',\n  boxShadow: '2px 2px 3px 0px rgba(0, 0, 0, 0.25)',\n  padding: '2px 8px',\n});\n\nconst MyListItem = styled(ListItem)({\n  padding: '8px 0 8px 10px',\n  borderBottom: '1px solid olive',\n  display: 'inline-block',\n});\n\nconst ContactItem = ({ name, number, onDelete }) => (\n  <MyListItem className={styles.item}>\n    <ListItemText className={styles.info}>{name}:</ListItemText>\n    <ListItemText className={styles.info}>{number}</ListItemText>\n    <ListItemSecondaryAction>\n      <MyButton className={styles.delete} onClick={onDelete} type=\"button\">\n        Delete\n      </MyButton>\n    </ListItemSecondaryAction>\n  </MyListItem>\n);\n\nContactItem.propTypes = {\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  onDelete: PropTypes.func.isRequired,\n};\n\nexport default ContactItem;","import React from 'react';\nimport ContactItem from './ContactItem';\nimport PropTypes from 'prop-types';\n\nimport List from '@material-ui/core/List';\n\nconst ContactList = ({ contacts, deleteContact }) => {\n  return (\n    <List>\n      {contacts &&\n        contacts.map(({ id, name, number }) => (\n          <ContactItem\n            key={id}\n            name={name}\n            number={number}\n            onDelete={() => deleteContact(id)}\n          />\n        ))}\n    </List>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.array.isRequired,\n  deleteContact: PropTypes.func.isRequired,\n};\n\nexport default ContactList;","import { connect } from 'react-redux';\nimport { contactsOperations, contactsSelectors } from '../../redux/contacts';\nimport ContactList from './ContactList';\n\nconst mapStateToProps = state => ({\n  contacts: contactsSelectors.filteredItems(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  deleteContact: contactId =>\n    dispatch(contactsOperations.deleteContact(contactId)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);","/*import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './Filter.module.css';\n\nimport TextField from '@material-ui/core/TextField';\n\nclass Filter extends Component {\n  componentWillUnmount() {\n    this.props.resetFilter();\n  }\n\n  render() {\n    const { filter, onChange } = this.props;\n\n    return (\n      <TextField\n        className={styles.input}\n        type=\"text\"\n        value={filter}\n        onChange={onChange}\n        label=\"Find contacts by name\"\n        size=\"small\"\n        variant=\"outlined\"\n      />\n    );\n  }\n}\n\nFilter.propTypes = {\n  filter: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  resetFilter: PropTypes.func.isRequired,\n};\n\nexport default Filter;*/\n\nimport React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { contactsActions, contactsSelectors } from '../../redux/contacts';\nimport styles from './Filter.module.css';\nimport TextField from '@material-ui/core/TextField';\n\nexport default function Filter() {\n  const dispatch = useDispatch();\n  const filter = useSelector(contactsSelectors.getFilter);\n  useEffect(() => {\n    dispatch(contactsActions.resetFilter());\n  }, [dispatch]);\n\n  return (\n      <TextField\n        className={styles.input}\n        type=\"text\"\n        value={filter}\n        onChange={e => dispatch(contactsActions.changeFilter(e.target.value))}\n        label=\"Find contacts by name\"\n        size=\"small\"\n        variant=\"outlined\"\n      />\n    );\n}","/*import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport ContactForm from '../../components/ContactForm';\nimport ContactList from '../../components/ContactList';\nimport Filter from '../../components/Filter';\nimport { ToastContainer, Zoom } from 'react-toastify';\nimport { connect } from 'react-redux';\nimport { contactsOperations, contactsSelectors } from '../../redux/contacts';\nimport styles from './ContactsView.module.css';\nimport 'react-toastify/dist/ReactToastify.css';\n\nclass ContactsView extends Component {\n  componentDidMount() {\n    this.props.fetchContacts();\n  }\n\n  render() {\n    const { items } = this.props;\n\n    return (\n      <>\n        <h1 className={styles.title}>Phonebook</h1>\n        <ContactForm />\n        <h2 className={styles.title}>Contacts</h2>\n        <section className={styles.contactsSection}>\n          {items.length > 1 && <Filter />}\n          {items.length > 0 ? (\n            <ContactList />\n          ) : (\n            <p>The contact list is empty. Please add a new contact.</p>\n          )}\n          <ToastContainer\n            position=\"top-center\"\n            autoClose={2000}\n            newestOnTop\n            limit={3}\n            transition={Zoom}\n          />\n        </section>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  items: contactsSelectors.getItems(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchContacts: () => dispatch(contactsOperations.fetchContacts()),\n});\n\nContactsView.propTypes = {\n  items: PropTypes.array.isRequired,\n  fetchContacts: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactsView);*/\n\nimport React, { useEffect } from 'react';\nimport ContactForm from '../../components/ContactForm';\nimport ContactList from '../../components/ContactList';\nimport Filter from '../../components/Filter';\nimport { ToastContainer, Zoom } from 'react-toastify';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { contactsOperations, contactsSelectors } from '../../redux/contacts';\nimport styles from './ContactsView.module.css';\nimport 'react-toastify/dist/ReactToastify.css';\n\nexport default function ContactsView() {\n  const dispatch = useDispatch();\n  const items = useSelector(contactsSelectors.getItems);\n  useEffect(() => {\n    dispatch(contactsOperations.fetchContacts());\n  }, [dispatch]);\n\n  return (\n      <>\n        <h1 className={styles.title}>Phonebook</h1>\n        <ContactForm />\n        <h2 className={styles.title}>Contacts</h2>\n        <section className={styles.contactsSection}>\n          {items.length > 1 && <Filter />}\n          {items.length > 0 ? (\n            <ContactList />\n          ) : (\n            <p>The contact list is empty. Please add a new contact.</p>\n          )}\n          <ToastContainer\n            position=\"top-center\"\n            autoClose={2000}\n            newestOnTop\n            limit={3}\n            transition={Zoom}\n          />\n        </section>\n      </>\n    );\n}"],"sourceRoot":""}